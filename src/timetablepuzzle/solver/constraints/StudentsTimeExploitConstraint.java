package timetablepuzzle.solver.constraints;

import java.util.HashMap;
import java.util.List;

import timetablepuzzle.eclipselink.entities.inputdata.Class;
import timetablepuzzle.eclipselink.entities.inputdata.Solution;

public class StudentsTimeExploitConstraint extends AbstractSoftConstraint {
	private int _maxStHoursNoBreak;
	private int _maxStHoursPerDay;
	
	/**
	 * Default constructor
	 */
	public StudentsTimeExploitConstraint()
	{
		this.set_maxStHoursNoBreak(6);
		this.set_maxStHoursPerDay(10);
		this.set_pointsOfPenaltyPerViolation(5);
	}

	/*****************Getters and setters****************/
	public int get_maxStHoursNoBreak() {
		return _maxStHoursNoBreak;
	}

	public void set_maxStHoursNoBreak(int _maxStHoursNoBreak) {
		this._maxStHoursNoBreak = _maxStHoursNoBreak;
	}

	public int get_maxStHoursPerDay() {
		return _maxStHoursPerDay;
	}

	public void set_maxStHoursPerDay(int _maxStHoursPerDay) {
		this._maxStHoursPerDay = _maxStHoursPerDay;
	}
	
	/***********Public methods that define the class behavior**************/
	/**
	 * Returns the total number of penalty point for the solution given 
	 * @param solution
	 * @return
	 */
	public long CalculatePenaltyPoints(Solution solution)
	{
		long totalPPoints = 0;
		for(Class[] stClasses : solution.get_studentsTimetable().values())
		{
			totalPPoints += GetPenaltyPointsForStudents(
					stClasses, solution.get_nrOfDays(), solution.get_nrOfTimeSlotsPerDay());
		}
		
		return totalPPoints;
	}
	
	/**
	 * Determines the penalty points for a class by subtracting from the pPoints gained
	 *  with the class assigned the pPoints gained with the class unassigned
	 * @param solution
	 * @param selClass
	 * @return
	 */
	public long GetPenaltyPointsForVariable(Solution solution, Class selClass)
	{
		// TO DO: To check if this does what it is supposed to do
		// Get the classes of the studentGroups that attend the selClass
		int dayNTime = solution.get_assignedClasses().get(selClass.getId());
		HashMap<Integer,Class[]> studentsTimetable = solution.get_studentsTimetable();
		List<Integer> stGrpsIds = selClass.getAssignedStudentGroupsIds();
		// Do everything in one iteration
		long pPointsWithClass = 0;
		long pPointsWithoutClass = 0;
		Class[] stGrpClasses;
		for(Integer stGrpId : stGrpsIds)
		{
			stGrpClasses = studentsTimetable.get(stGrpId);
			// Get pPoints with class
			pPointsWithClass += GetPenaltyPointsForStudents(
					stGrpClasses, solution.get_nrOfDays(), solution.get_nrOfTimeSlotsPerDay());
			// Temporarily unassigns the class
			stGrpClasses[dayNTime] = null;
			// Get pPoints without class
			pPointsWithoutClass += GetPenaltyPointsForStudents(
					stGrpClasses, solution.get_nrOfDays(), solution.get_nrOfTimeSlotsPerDay());
			// Assigns the class back in
			stGrpClasses[dayNTime] = selClass;			
		}
		
		// The penalty points that this class has is calculated as first - the second
		return pPointsWithClass - pPointsWithoutClass;
	}
	
	/**
	 * Returns the penalty points calculated for a given set of classes
	 * @param instrClasses
	 * @param nrOfDays
	 * @param nrOfTimeSlotsPerDay
	 * @return
	 */
	private long GetPenaltyPointsForStudents(Class[] instrClasses, int nrOfDays, int nrOfTimeSlotsPerDay)
	{
		long pPoints = 0;
		// Helper variables
		int lastOccupiedHour;
		int nrOfConsecutiveHours;
		int hoursOfWorkPerDay;
		// Calculate the number of working hour per day, 
		// and the number of consecutive working hours
		for(int i=0; i<nrOfDays; i++)
		{
			// Reset variables
			lastOccupiedHour = 0;
			nrOfConsecutiveHours = 0;
			hoursOfWorkPerDay = 0;
			// For each time of day
			for(int j=0; j< nrOfTimeSlotsPerDay; j++)
			{
				if(instrClasses[i*nrOfDays + j] != null)
				{
					// The slot is a working hour
					// Count consecutive hours
					if(j == 0)
					{
						nrOfConsecutiveHours++;
					}else{
						 if(lastOccupiedHour == j-1)
						 {
							 nrOfConsecutiveHours++; 
						 }else{
							 nrOfConsecutiveHours = 0;
						 }
					}
					// Check constraint and calculate penalty points
					if(nrOfConsecutiveHours > _maxStHoursNoBreak)
					{
						pPoints += get_pointsOfPenaltyPerViolation();
					}
					lastOccupiedHour = j;
					hoursOfWorkPerDay++;
					if(hoursOfWorkPerDay > _maxStHoursPerDay)
					{
						pPoints += get_pointsOfPenaltyPerViolation();
					}
				}
			}
		}
		
		return pPoints;
	}
}
