package timetablepuzzle.solver.constraints;

import java.util.List;

import timetablepuzzle.eclipselink.entities.inputdata.Class;
import timetablepuzzle.eclipselink.entities.inputdata.Solution;
import timetablepuzzle.usecases.solution.TimeslotPattern;

public class StudentsTimeExploitConstraint extends AbstractSoftConstraint {
	public static final int DefaultMaxWorkingHoursWithoutBreak = 6;
	public static final int DefaultMaxWorkingHoursPerDay = 10;
	
	private int maxStHoursNoBreak;
	private int maxStHoursPerDay;
	
	public StudentsTimeExploitConstraint(Solution solution)
	{
		super(solution);
		this.set_maxStHoursNoBreak(DefaultMaxWorkingHoursWithoutBreak);
		this.set_maxStHoursPerDay(DefaultMaxWorkingHoursPerDay);
		this.setNrOfPenaltyPointsPerViolation(DefaultNrOfPenaltyPointsPerViolation);
	}

	/*****************Getters and setters****************/
	public int get_maxStHoursNoBreak() {
		return maxStHoursNoBreak;
	}

	public void set_maxStHoursNoBreak(int _maxStHoursNoBreak) {
		this.maxStHoursNoBreak = _maxStHoursNoBreak;
	}

	public int get_maxStHoursPerDay() {
		return maxStHoursPerDay;
	}

	public void set_maxStHoursPerDay(int _maxStHoursPerDay) {
		this.maxStHoursPerDay = _maxStHoursPerDay;
	}
	
	/***********Public methods that define the class behavior**************/
	/**
	 * Returns the total number of penalty point for the solution given 
	 * @param solution
	 * @return
	 */
	public long CalculateTotalNrOfPenaltyPoints()
	{
		long totalPPoints = 0;
		for(Integer studentGroupId: this.solution.GetAllStudentGroupsIds())
		{
			totalPPoints += GetPenaltyPointsForStudents(studentGroupId);
		}
		
		return totalPPoints;
	}
	
	/**
	 * Determines the penalty points for a class by subtracting from the pPoints gained
	 *  with the class assigned the pPoints gained with the class unassigned
	 * @param solution
	 * @param selClass
	 * @return
	 */
	public long GetNrOfPenaltyPointsForVariable(Solution solution, Class aClass)
	{
		int dayAndTimeSlot = this.solution.GetAssignedDayAndTimeSlot(aClass.getId());
		List<Integer> stGrpsIds = aClass.getAssignedStudentGroupsIds();
		// Do everything in one iteration
		long pPointsWithClass = 0;
		long pPointsWithoutClass = 0;
		for(Integer stGrpId : stGrpsIds)
		{
			pPointsWithClass += GetPenaltyPointsForStudents(stGrpId);
			this.unassignManager.Unassign(aClass);
			pPointsWithoutClass += GetPenaltyPointsForStudents(stGrpId);
			this.assignManager.Assign(aClass, dayAndTimeSlot);
		}
		
		return pPointsWithClass - pPointsWithoutClass;
	}
	
	/**
	 * Returns the penalty points calculated for a given set of classes
	 * @param instrClasses
	 * @param nrOfDays
	 * @param nrOfTimeSlotsPerDay
	 * @return
	 */
	private long GetPenaltyPointsForStudents(Integer studentGroupId)
	{
		long totalPenaltyPoints = 0;
		int nrOfDays = TimeslotPattern.NrOfDays;
		int nrOfTimeSlotsPerDay = TimeslotPattern.NrOfTimeSlotsPerDay;
		// Helper variables
		int lastOccupiedHour;
		int nrOfConsecutiveHours;
		int hoursOfWorkPerDay;
		// Calculate the number of working hour per day, 
		// and the number of consecutive working hours
		for(int i=0; i<nrOfDays; i++)
		{
			// Reset variables
			lastOccupiedHour = 0;
			nrOfConsecutiveHours = 0;
			hoursOfWorkPerDay = 0;
			// For each time of day
			for(int j=0; j< nrOfTimeSlotsPerDay; j++)
			{
				int dayAndTimeSlot = i*nrOfDays + j;
				if(this.solution.IsStudentGroupFree(studentGroupId, dayAndTimeSlot))
				{
					// The slot is a working hour
					// Count consecutive hours
					if(j == 0)
					{
						nrOfConsecutiveHours++;
					}else{
						 if(lastOccupiedHour == j-1)
						 {
							 nrOfConsecutiveHours++; 
						 }else{
							 nrOfConsecutiveHours = 0;
						 }
					}
					// Check constraint and calculate penalty points
					if(nrOfConsecutiveHours > this.maxStHoursNoBreak)
					{
						totalPenaltyPoints += getNrOfPenaltyPointsPerViolation();
					}
					lastOccupiedHour = j;
					hoursOfWorkPerDay++;
					if(hoursOfWorkPerDay > this.maxStHoursPerDay)
					{
						totalPenaltyPoints += getNrOfPenaltyPointsPerViolation();
					}
				}
			}
		}
		
		return totalPenaltyPoints;
	}
}
